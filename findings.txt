20.
     Created this new app using this command - https://create-react-app.dev/
21.
    For running project, execute "npm start".
    Opens up application against "localhost:3000"
    For stopping the npm execution, press ctrl + C and enter 'Y'
22.
    Cleaning up unnecessary files and moved logo from public to src.
    We only have index.js and app logo inside src folder. Under public folder, we just have index.html
    Now, doing npm start, we see errors(Since we removed a few files and changed location of logo)
    We removed additional imports from index.js file. We see
    root.render(
    <React.StrictMode>
    </React.StrictMode>
    );
        Used to identify potential issues in web application. Does not render anything that's not visible on UI.
        Will give warnings and errors on UI.

    Removed unnecessary code present in index.html 

23.
    Under index.js > root.render(), adding <div>Hello World!</div>
    We did not need to add any manual js, babel libraries for this project. npx react app did that job for us
    All dependencies can be seen in package.json project

24.
    For displaying fancy items, need to write basic HTML into root.render(<HTML gos here>)
    For adding header and footer, move existing code to function.
    Created a function/component namely MainBody() and we can call it inside root.render(<MainBody />) tag
    FIRST LETTER MUST ALWAYS BE CAPITAL. USE PASCAL CASE FOR REACT COMPONENTS
    Under .render(), there must always be 1 parent element
    The function that was used here is known as a COMPONENT

26.
    Components can be nested. Like Parent/Child components etc.

27.
    Created nested components using functions in react.

28.
    JSX Rules:
        Component names - Pascal Casing
            function Footer(){} -> <Footer/>
        Props must be camel casing(MaxLength and ReadOnly in below example)
            <input maxLength={5} readOnly='false'>
        Inline style is an object os it must be enclosed in double curly brackets
            <p style={{color: "gray", }}>Happy Coding!</p>
        Integer in props go in {} and "" will be string and bool goes in {}
            <input maxLength={5} readOnly={false} placeHolder="Ben"></input>
        'Class' NEEDS to be replaced with 'className'(Since class is a reserved keyword)
            <h1 className='heading1'>

29. Styles
    Approach#1: Adding inline styles to JSX
        We cannot directly add styles to JSX.
        <p style="color:gray;background-color:black"> Happy Coding!</p>
        Gives error:
            Uncaught Error: The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX.
        Reason:
            Within JSX, style attribute accepts js object with camelCase properties.
            Above code needs to be changed to this:
            <p style={{color:"gray", backgroundColor:"black"}}> Happy Coding!</p>
            Changes:
                Replace "" with {{}}
                Actual property value i.e. gray and black in above example to be put in ""
                - needs to be replaced with pascalCase. background-color to be changed to backgroundColor
            Works

    Approach#2: Add styles to a const and then assign it
    const subHeaderStyle={
  color:"blueviolet",
  backgroundColor: "lightgray"
}

function SubHeader(){
  return(
    <p style={subHeaderStyle}>This will be an exciting course.</p>
  );
}

30. Adding bootstrap
    Added 1 css file & 2 js files from here - https://getbootstrap.com/docs/5.3/getting-started/introduction/
    Then directly added styles in index.js > MainHeader function
    function MainHeader(){
        return(
            <h1 class="text-primary">REACT COURSE</h1>
        );
    }

    This works but in console, we get an error. Since we cannot use "class" keyword.
    Need to replace it with className
    TAKEAWAY = Use className and not class in JSX component

31. Adding custom css
    Created a custom css and put it inside src>css>style.css
    Then added its link in index.html but changes were not reflecting.
    Reason being because we've put that css in the folder which contains react code.
    So, we need to import it as below in index.js file:
    import "./css/style.css";

32. Variable in JSX
    Similar to js, we can initialize a variable using
        let
        var
        const
    keywords. Avoid var. Use either let or const keywords.
    We can use that variable inside {} brackets